{"version":3,"sources":["components/layout/Loggedin.js","store/actions/authActions.js","components/layout/Loggedout.js","components/layout/Navbar.js","components/dashboard/Notification.js","components/posts/PostSummary.js","components/posts/PostList.js","components/dashboard/Dashboard.js","components/posts/PostDetails.js","components/auth/Login.js","components/auth/Register.js","store/actions/postActions.js","components/posts/CreatePost.js","components/App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/postReducer.js","store/reducers/rootReducer.js","config/FirebaseConfig.js","index.js"],"names":["Loggedin","logout","this","props","className","to","onClick","profile","initials","Component","connect","dispatch","getState","firebase","auth","signOut","then","type","Loggedout","Navbar","console","log","links","uid","isLoaded","state","Notification","notifications","map","item","key","id","user","content","moment","time","toDate","fromNow","PostSummary","post","title","authorFirstName","authorLastName","createdAt","calendar","PostList","posts","Dashboard","compose","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","Login","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","login","authError","onSubmit","htmlFor","onChange","credentials","signInWithEmailAndPassword","catch","err","Register","firstName","lastName","signUp","newUser","createUserWithEmailAndPassword","response","doc","set","createPost","getFirebase","getFirestore","authorId","add","Date","CreatePost","image","video","url","history","push","data-length","placeholder","App","exact","path","component","PostDetails","Boolean","window","location","hostname","initState","authReducer","action","message","postReducer","rootReducer","combineReducers","firebaseReducer","firestoreReducer","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","store","createStore","applyMiddleware","thunk","withExtraArgument","rrfProps","config","userProfile","attachAuthIsReady","useFirestoreForProfile","createFirestoreInstance","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.822bd808.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { logout }from '../../store/actions/authActions';\n\nclass Loggedin extends Component {\n  render() {\n    const { logout } = this.props\n    return (\n      <ul className=\"right\">\n        <li>\n          <NavLink to=\"/createpost\">New Post</NavLink>\n        </li>\n        <li>\n        <NavLink to=\"/\" onClick={logout}>Logout</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/\" className=\"btn btn-floating blue lighten-1\">\n            {this.props.profile.initials}\n          </NavLink>\n        </li>\n      </ul>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return{\n    logout: () => dispatch(logout())\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Loggedin);\n","import firebase  from '../../index'\nimport { firestore } from 'firebase'\n\nexport const login = (credentials) => {\n    return (dispatch, getState) => {\n        \n        firebase.auth().signInWithEmailAndPassword(\n            credentials.email,\n            credentials.password\n        ).then(() => {\n            dispatch({type: 'LOGIN_SUCCESS' })\n        }).catch((err) => {\n            dispatch({type: 'LOGIN_FAILURE', err})\n        })\n    }\n}\n\nexport const logout = () => {\n    return (dispatch, getState) => {\n        \n        firebase.auth().signOut().then(() => {\n            dispatch({type: 'LOGOUT_SUCCESS' })\n        })\n    }\n}\n\nexport const signUp = (newUser) => {\n    console.log('newUser',newUser)\n    return (dispatch, getState) => {\n        firebase.auth().createUserWithEmailAndPassword(\n            newUser.email,\n            newUser.password\n        ).then((response) => {\n            return firestore().collection('users').doc(response.user.uid).set({\n                firstName: newUser.firstName,\n                lastName: newUser.lastName,\n                initials: newUser.firstName[0] + newUser.lastName[0]\n            })\n        }).then(() => {\n            dispatch({type: 'SIGNUP_SUCCESS'})\n        }).catch(err => {\n            dispatch({type: 'SIGNUP_FAILURE', err})\n        })\n    }\n}","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nclass Loggedout extends Component {\n  render() {\n    return (\n      <ul className=\"right\">\n        <li>\n          <NavLink to=\"/register\">Register</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/login\">Login</NavLink>\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default Loggedout;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loggedin from \"./Loggedin\";\nimport Loggedout from \"./Loggedout\";\nimport { connect } from 'react-redux';\n\nclass Navbar extends Component {\n  render() {\n    console.log(\"props:\",this.props)\n    const { auth, profile } = this.props\n    const  links  = auth.uid ? <Loggedin profile={ profile } /> : <Loggedout />;\n    return (\n      <nav className=\"nav-wrapper grey darken-3\">\n        <div className=\"container\">\n          <Link to=\"/\" className=\"brand-logo\">\n            postIT\n          </Link>\n          { auth.isLoaded && links }\n        </div>\n      </nav>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  console.log(state)\n  return {\n    auth: state.firebase.auth,\n    profile: state.firebase.profile\n  }\n}\nexport default connect(mapStateToProps,null)(Navbar);\n","import React, { Component } from \"react\";\nimport moment from 'moment';\n\nclass Notification extends Component {\n  render() {\n    const { notifications } = this.props;\n    return (\n      <div className=\"section\">\n        <div className=\"card z-depth-0\">\n          <div className=\"card-content\">\n            <span className=\"card-title\">Notifications</span>\n            <ul className=\"notifications\">\n              {notifications && notifications.map(item => {\n                return(\n                  <li key={item.id}>\n              <span className='blue-grey-text'>{item.user} </span>\n                <span>{item.content}</span>\n                <div className=\"grey-text note-date\">\n                  {moment(item.time.toDate()).fromNow()}\n                </div>\n                  </li>\n                )\n              })}\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Notification;\n","import React from \"react\";\nimport moment from \"moment\";\n\nconst PostSummary = ({ post }) => {\n  return (\n    <div className=\"card z-depth-0 post-summary\">\n      <div className=\"card-content grey-text text-darken-3\">\n        <span className=\"card-title\">{post.title}</span>\n<p>Posted by {post.authorFirstName} {post.authorLastName}</p>\n        <p className=\"grey-text\">{moment(post.createdAt.toDate()).calendar()}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default PostSummary;\n","import React from \"react\";\nimport PostSummary from \"./PostSummary\";\nimport { Link } from 'react-router-dom';\nconst PostList = ({ posts }) => {\n  // console.log(posts)\n  return (\n    <div className=\"post-list section\">\n      {posts &&\n        posts.map(post => {\n          return (\n          <Link to = { '/post/' + post.id } key={post.id}>\n          <PostSummary post={post} />\n          </Link>\n        )})}\n    </div>\n  );\n};\n\nexport default PostList;\n","import React, { Component } from \"react\";\nimport Notification from \"./Notification\";\nimport PostList from \"../posts/PostList\";\nimport { connect } from \"react-redux\";\nimport { firestoreConnect } from \"react-redux-firebase\";\nimport { compose } from \"redux\";\nimport { Redirect } from 'react-router-dom';\n\nclass Dashboard extends Component {\n  render() {\n    const { posts, auth, notifications } = this.props;\n\n    if (!auth.uid) return <Redirect to = '/login' />\n    return (\n      <div className=\"dashboard container\">\n        <div className=\"row\">\n          <div className=\"col s12 m6\">\n            <PostList posts={posts} />\n          </div>\n          <div className=\"col s12 m5 offset-m1\">\n            <Notification notifications = { notifications }/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.firestore.ordered.posts,\n    auth: state.firebase.auth,\n    notifications: state.firestore.ordered.notifications\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([\n    {collection : \"posts\", orderBy:['createdAt','desc']},\n    {collection: 'notifications',limit:3, orderBy:['time','desc']}\n  ])\n)(Dashboard);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { firestoreConnect } from \"react-redux-firebase\";\nimport { compose } from \"redux\";\nimport moment from \"moment\";\n\nconst PostDetails = props => {\n  const { post } = props;\n  if (post) {\n    return (\n      <div className=\"container section post-details\">\n        <div className=\"card z-depth-0\">\n          <div className=\"card-content\">\n            <span className=\"card-title\"> {post.title}</span>\n            <p>{post.content}</p>\n          </div>\n          <div className=\"card-action ligthen-4 grey-text\">\n            <div>\n              Posted by {post.authorFirstName} {post.authorLastName}\n            </div>\n            <div>{moment(post.createdAt.toDate()).calendar()}</div>\n          </div>\n        </div>\n      </div>\n    );\n  } else {\n    return(<div className=\"container center \">\n      <p>Loading posts...</p>\n    </div>\n    );\n  }\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const id = ownProps.match.params.id;\n  const posts = state.firestore.data.posts;\n  const post = posts ? posts[id] : null;\n  return {\n    post : post\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect(() => [\"posts\"])\n)(PostDetails);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../store/actions/authActions\";\nimport { Redirect } from \"react-router-dom\";\n\nclass Login extends Component {\n  state = {\n    email: \"\",\n    password: \"\"\n  };\n  handleChange = e => {\n    this.setState({\n      [e.target.id]: e.target.value\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.login(this.state);\n  };\n  render() {\n    const { authError, auth } = this.props;\n    if(auth.uid) return <Redirect to = '/dashboard' />\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit} className=\"white\">\n          <h5 className=\"grey-text text-darken-3\">Sign In</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn blue lighten-1 blue z-depth-0\">Login</button>\n            <div className=\"red-text center\">\n              {authError ? <p>{authError}</p> : null}\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    authError: state.auth.authError,\n    auth: state.firebase.auth\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    login: credentials => dispatch(login(credentials))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { signUp } from \"../../store/actions/authActions\";\n\nclass Register extends Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\"\n  };\n  handleChange = e => {\n    this.setState({\n      [e.target.id]: e.target.value\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.signUp(this.state);\n  };\n  render() {\n    const { authError, auth } = this.props;\n    if (auth.uid) return <Redirect to=\"/dashboard\" />;\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit} className=\"white\">\n          <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"firstName\">First Name</label>\n            <input type=\"text\" id=\"firstName\" onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"lastName\">Last Name</label>\n            <input type=\"text\" id=\"lastName\" onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn blue lighten-1 blue z-depth-0\">Login</button>\n            <div className=\"red-text center\">\n              {authError ? <p>{authError}</p> : null}\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    authError: state.auth.authError,\n    auth: state.firebase.auth\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    signUp: newUser => dispatch(signUp(newUser))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\n","// import PostSummary from \"../../components/posts/PostSummary\";\nimport { firestore } from '../../index'\n\nconst createPost = post => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    // async call to database\n    const profile = getState().firebase.profile;\n    const authorId = getState().firebase.auth.uid;\n    firestore\n      .collection(\"posts\")\n      .add({\n        ...post,\n        authorFirstName: profile.firstName,\n        authorLastName: profile.lastName,\n        authorId: authorId,\n        createdAt: new Date()\n      })\n      .then(() => {\n        dispatch({\n          type: \"CREATE_POST\",\n          post\n        });\n      })\n      .catch(err => {\n        dispatch({\n          type: \"CREATE_POST_ERROR\",\n          err\n        });\n      });\n  };\n};\n\nexport default createPost;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport createPost from \"../../store/actions/postActions\";\n\nclass CreatePost extends Component {\n  state = {\n    title: \"\",\n    content: \"\",\n    image: null,\n    video: null,\n    url: null\n  };\n  handleChange = e => {\n    this.setState({\n      [e.target.id]: e.target.value\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.createPost(this.state);\n    this.props.history.push(\"/dashboard\");\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit} className=\"white\">\n          <h5 className=\"grey-text text-darken-3\">Create a post</h5>\n          <div className=\"row\">\n            <div className=\"input-field col s6\">\n              <label htmlFor=\"title\"></label>\n              <input\n                type=\"text\"\n                data-length=\"300\"\n                id=\"title\"\n                className=\"title\"\n                onChange={this.handleChange}\n                placeholder=\"Title\"\n              />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"input-field\">\n              <label htmlFor=\"content\"></label>\n              <textarea\n                type=\"text\"\n                id=\"content\"\n                className=\"materialize-textarea\"\n                onChange={this.handleChange}\n                placeholder=\"Text(optional)\"\n              />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"input-field\">\n              <button className=\"btn blue lighten-1 blue z-depth-0\">\n                Post\n              </button>\n            </div>\n            <div className=\"input-field\">\n              <button className=\"btn blue lighten-1 blue z-depth-0\">\n                Cancel\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createPost: post => dispatch(createPost(post))\n  };\n};\nexport default connect(null, mapDispatchToProps)(CreatePost);\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./layout/Navbar\";\nimport Dashboard from \"./dashboard/Dashboard\";\nimport PostDetails from \"./posts/PostDetails\";\nimport Login from \"./auth/Login\";\nimport Register from \"./auth/Register\";\nimport CreatePost from \"./posts/CreatePost\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/dashboard\" component={Dashboard} />\n            <Route path=\"/post/:id\" component={PostDetails} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n            <Route path=\"/createpost\" component={CreatePost} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n  authError: null\n};\n\nconst authReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"LOGIN_SUCCESS\":\n      console.log(\"login success\");\n      return {\n        ...state,\n        authError: null\n      };\n    case \"LOGIN_FAILURE\":\n      console.log(\"login failed\");\n      return {\n        ...state,\n        authError: \"Login Failed\"\n      };\n    case \"LOGOUT_SUCCESS\":\n      console.log(\"logout success\");\n      return state;\n    case \"SIGNUP_SUCCESS\":\n      console.log(\"signup success\");\n      return {\n        ...state,\n        authError: null\n      };\n    case \"SIGNUP_FAILURE\":\n      console.log(\"signup failure\");\n      return {\n        ...state,\n        authError: action.err.message\n      };\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;\n","const initState = {\n  posts: [\n    { id: \"1\", title: \"Title-1\", content: \"blah....\" },\n    { id: \"2\", title: \"Title-2\", content: \"blah....\" },\n    { id: \"3\", title: \"Title-3\", content: \"blah....\" }\n  ]\n};\n\nconst postReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"CREATE_POST\":\n      console.log(\"created post\", action.post);\n      return state;\n    case \"CREATE_POST_ERROR\":\n      console.log(\"created post\", action.err);\n      return state;\n    default:\n      console.log(\"Default\");\n      return state;\n  }\n};\n\nexport default postReducer;\n","import authReducer from \"./authReducer\";\nimport postReducer from \"./postReducer\";\nimport { firebaseReducer } from \"react-redux-firebase\";\nimport { firestoreReducer } from \"redux-firestore\";\n\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  post: postReducer,\n  firebase: firebaseReducer,\n  firestore: firestoreReducer\n});\n\nexport default rootReducer;\n","// import firebase from \"firebase/app\";\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBG8axxO_LrOedYk_TwXR6dUQmFbWIV99A\",\n  authDomain: \"postit-95288.firebaseapp.com\",\n  databaseURL: \"https://postit-95288.firebaseio.com\",\n  projectId: \"postit-95288\",\n  storageBucket: \"postit-95288.appspot.com\",\n  messagingSenderId: \"715468752574\",\n  appId: \"1:715468752574:web:6ce09d3f02ede2509c40ef\",\n  measurementId: \"G-L1H45NRGBH\"\n};\n\n\nexport default firebaseConfig;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./store/reducers/rootReducer\";\nimport thunk from \"redux-thunk\";\n// import {authIsReady}  from \"react-redux-firebase\";\nimport { getFirestore, createFirestoreInstance } from \"redux-firestore\";\nimport { getFirebase, ReactReduxFirebaseProvider } from \"react-redux-firebase\";\nimport firebaseConfig from \"./config/FirebaseConfig\";\nimport * as firebase from \"firebase\";\nimport \"firebase/firestore\";\n\nfirebase.initializeApp(firebaseConfig);\n// Initialize other services on firebase instance\nfirebase.firestore(); // <- needed if using firestore\nexport const firestore = firebase.firestore();\nexport default firebase;\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore }))\n  )\n);\n\n// react-redux-firebase config\nconst rrfConfig = {\n  userProfile: \"users\",\n  attachAuthIsReady: true,\n  useFirestoreForProfile: true // Firestore for Profile instead of Realtime DB\n};\n\nconst rrfProps = {\n  firebase,\n  config: rrfConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance // <- needed if using firestore\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <ReactReduxFirebaseProvider {...rrfProps}>\n      <App />\n    </ReactReduxFirebaseProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}